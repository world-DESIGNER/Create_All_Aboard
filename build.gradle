buildscript {
    repositories {
        maven { url "https://maven.minecraftforge.net" }
        maven { url "https://repo.spongepowered.org/maven" }
    }
    dependencies {
        classpath group: "net.minecraftforge.gradle", name: "ForgeGradle", version: "5.1.+", changing: true
        classpath "org.spongepowered:mixingradle:0.7.+"
    }
}

plugins {
    id "java"
    id "eclipse"
    id "maven-publish"
    id "net.minecraftforge.gradle" version "5.1.+"
    id "org.parchmentmc.librarian.forgegradle" version "1.+"
}

apply plugin: "org.spongepowered.mixin"

archivesBaseName = rootProject.archives_base_name
version = "${rootProject.mc_version}-${rootProject.mod_version}"
group = rootProject.maven_group

java.toolchain.languageVersion = JavaLanguageVersion.of(17)
println("Java: " + System.getProperty("java.version") + " JVM: " + System.getProperty("java.vm.version") + "(" + System.getProperty("java.vendor") + ") Arch: " + System.getProperty("os.arch"))

minecraft {
    mappings channel: "parchment", version: "${parchment_version}-${mc_version}"

    // accessTransformer = file("src/main/resources/META-INF/accesstransformer.cfg")

    runs {
        client {
            workingDirectory project.file("run")

            property "forge.logging.markers", "REGISTRIES"
            property "forge.logging.console.level", "debug"
            args "-mixin.config=${mod_id}.mixin.common.json", "-mixin.config=${mod_id}.mixin.client.json"

            mods {
                modClientRun {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file("run")

            property "forge.logging.markers", "REGISTRIES"
            property "forge.logging.console.level", "debug"
            args "-mixin.config=${mod_id}.mixin.common.json", "-mixin.config=${mod_id}.mixin.client.json"

            mods {
                modServerRun {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file("run")

            property "forge.logging.markers", "REGISTRIES"
            property "forge.logging.console.level", "debug"
            args "--mod", "${mod_id}", "--all", "--output", file("src/generated/resources/"), "--existing", file("src/main/resources/")

            mods {
                modDataRun {
                    source sourceSets.main
                }
            }
        }
    }
}

sourceSets.main.resources { srcDir "src/generated/resources" }

repositories {
    maven {
        name "JEI"
        url "https://dvs1.progwml6.com/files/maven"
    }
    maven {
        name "ModMaven"
        url "https://modmaven.dev"
    }
    maven {
        name "CurseForge"
        url "https://www.cursemaven.com"
    }
}

dependencies {
    // Mod
    minecraft "net.minecraftforge:forge:${mc_version}-${forge_api_version}"
    annotationProcessor "org.spongepowered:mixin:${mixin_version}:processor"

    // Implementation
    implementation fg.deobf("com.simibubi.create:create-${mc_version}:${create_version}:slim") { transitive = false }
    implementation fg.deobf("com.jozufozu.flywheel:flywheel-forge-${mc_version}:${flywheel_version}")
    implementation fg.deobf("com.tterrag.registrate:Registrate:${registrate_version}")
    implementation fg.deobf("curse.maven:create-industry-693815:${create_industry_version}")
    implementation fg.deobf("curse.maven:create-low-heated-873945:${create_low_heated_version}")
    implementation fg.deobf("curse.maven:create-diesel-generators-869316:${create_diesel_generators_version}")
    implementation fg.deobf("mezz.jei:jei-${mc_version}-forge:${jei_version}")

    // Runtiem Only
    runtimeOnly fg.deobf("curse.maven:jade-324717:${jade_file}")
    runtimeOnly fg.deobf("mekanism:Mekanism:${mc_version}-${mekanism_version}")
    runtimeOnly fg.deobf("mekanism:Mekanism:${mc_version}-${mekanism_version}:additions")
    runtimeOnly fg.deobf("mekanism:Mekanism:${mc_version}-${mekanism_version}:generators")
    runtimeOnly fg.deobf("mekanism:Mekanism:${mc_version}-${mekanism_version}:tools")
}

mixin {
    add sourceSets.main, "${mod_id}.mixin.refmap.json"
}

def resourceTargets = ["META-INF/mods.toml", "fabric.mod.json"]
def intoTargets = ["$rootDir/out/production/resources/", "$rootDir/out/production/${project.name}.main/", "$rootDir/bin/main/"]
def replaceProperties = [mc_version: mc_version,
    mod_id: mod_id, mod_version: mod_version, mod_name: mod_name, mod_description: mod_description, mod_license: mod_license, mod_homepage: mod_homepage, mod_source: mod_source, mod_issues: mod_issues,
    forge_api_version: forge_api_version, forge_loader_version: forge_loader_version,
    create_version: create_version, create_version_range: create_version_range, flywheel_version: flywheel_version
]

processResources {
    inputs.properties replaceProperties
    replaceProperties.put "project", project

    filesMatching(resourceTargets) {
        expand replaceProperties
    }

    intoTargets.each { target ->
        if (file(target).exists()) {
            copy {
                from(sourceSets.main.resources) {
                    include resourceTargets
                    expand replaceProperties
                }
                into target
            }
        }
    }
}

tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
    options.release = 17
}

jar {
    manifest {
        attributes([
                "Specification-Title"     : "${mod_id}",
                "Specification-Vendor"    : "gisellevonbingen",
                "Specification-Version"   : "1",
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : "${mod_version}",
                "Implementation-Vendor"   : "gisellevonbingen",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                "MixinConfigs" : "${mod_id}.mixin.common.json, ${mod_id}.mixin.client.json"
        ])
    }
}

jar.finalizedBy("reobfJar")
